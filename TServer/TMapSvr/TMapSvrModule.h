#pragma once

#define ON_RECEIVE(p)							case p : return On##p(pBUF);

#include "TServerSystem.h"

class CTMapSvrModule : public TServerSystem
{
public:
	MAPTCHANNEL m_mapTLOGCHANNEL;					// Logical channel data
	MAPTCHANNEL m_mapTCHANNEL;						// Channel data

	MAPTAICMDTEMP m_mapTCMDTEMP;					// Command template data
	MAPTMONSTERAI m_mapTMONAI;						// Monster AI data

	MAPTMONSPAWNTEMP m_mapTMONSPAWN;				// Monster spawn data
	MAPTMONSTERTEMP m_mapTMONSTER;					// Monster data
	MAPTMONATTR m_mapTMONATTR;
	MAPTPETTEMP m_mapTPET;							// Pet template data
	MAPTSKILLTEMP m_mapTSKILL;						// Skill template data
	MAPTITEMTEMP m_mapTITEM;						// Item template data
	MAPTSKILLTEMP m_mapTEQUIPSKILL;
	MAPVTMONITEM m_mapTMONITEM[ITEMGROUP_COUNT];
	MAPTTITLETEMP m_mapTTITLE;

	MAPTLEVEL m_mapTLEVEL;							// Level template data
	MAPTSTAT m_mapTCLASS;							// Class template data
	MAPTSTAT m_mapTRACE;							// Race template data
	MAPTSPAWNPOS m_mapTSPAWNPOS;
	MAPTINDURN m_mapTINDUN;
	MAPTNPC m_mapTNpc;
	MAPTBATTLEZONE m_mapTBATTLEZONE;
	MAPTLOCAL m_mapTLOCAL;
	MAPDWORD64 m_mapTPostBills;
	MAPDVDWORD m_mapCharPostBills;

	MAPTMAGICSKILL m_mapTMAGICSKILL;
	MAPTCASHITEM	m_mapTCashItem;

	MAPMAPVQUESTTEMP	m_mapTRIGGER;				// Quest trigger index
	MAPQUESTTEMP		m_mapQUESTTEMP;				// Quest search index
	VQUESTTEMP			m_vQUESTTEMP;				// Root quest template data

	MAPTITEMATTR m_mapTItemAttr;
	MAPTITEMATTR m_mapTITEMKINDATTR[IK_COUNT];
	MAPTITEMMAGIC m_mapTItemMagic;
	MAPVMONSPAWN m_mvSpawnGroup;
	MAPTPORTAL m_mapTPortal;
	MAPDWORD m_mapTSELFMONID;						// Self monster ID pool
	MAPDWORD m_mapTOPERATOR;						// Operator data
	MAPTDUEL m_mapTDuel;							// Dual data
	MAPTFORMULA m_mapTFORMULA;
	MAPTGAMBLE m_mapTGAMBLE;
	MAPTSTORAGEITEM m_mapTQuestItem;
	MAPTONTIMEMON m_mapTOnTimeMon;
	MAPTSTRING m_mapTSvrMsg;
	MAPTPVPOINT m_mapTPvPointKill;

	VTSWITCHOBJ m_vTSWITCHOBJ;
	VTITEMMAGIC	m_vItemMagic[IK_COUNT];
	VTITEMSET	m_vItemSet;
	VTMAGICSKILL m_vTMagicSkill;
	VTCASHCATEGORY m_vCashCategory;
	MAPCASHGAMBLE m_mapCashGameble;

	TITEMGRADE	m_itemgrade[ITEMLEVEL_COUNT];
	TGEMGRADE	m_gemgrade[GEM_MAX];
	DWORD m_dwDuelID;
	BYTE m_bMaxLevel;
	MAPWDWORD m_mapMaxCashGambleProb;
	WORD m_wEventValue[EVENT_COUNT];
	BYTE m_bCashShopStop;
	MAPEVENTINFO m_mapEVENT;
	MAPWORD	m_mapExtraSpawnID;

	VTLOCAL m_vOccupation;
	VTLOCAL m_vCastle;
	VTLOCAL m_vMission;
#ifdef SKYGARDEN
	VTLOCAL m_vSkygarden;
#endif

	BYTE			m_bFirstGroupCount;
	BYTE			m_bRankMonth;
	MONTHRANKER		m_arFameRank[FRT_COUNT][MONTHCOUNT][FAMERANKCOUNT];
	MONTHRANKER		m_arMonthRank[COUNTRY_COUNT][MONTHRANKCOUNT];
	MONTHRANKER		m_arFirstGradeGroup[COUNTRY_COUNT][FIRSTGRADEGROUPCOUNT];

	MAPTOURNAMENTPLAYER m_mapTNMTPlayer;
	MAPTOURNAMENT m_mapTournament;
	TOURNAMETTIME	m_tournament;
	VTMAP			m_vTNMTRESULTMAP;
	DWORD			m_dwTNMTResultTick;
	WORD m_arTutorialItem[TCONTRY_COUNT][TCLASS_COUNT][TSEX_COUNT][ES_COUNT];
	MAPHELPMESSAGE m_mapHelpMessage;
	MAPRPSGAME		m_mapRPSGame;
	DWORD			m_dwGBDelay[GB_COUNT];
	DWORD			m_dwWarCountryBalance[TCONTRY_B][WARCOUNTRY_MAXGAP];

	MAPARENA		m_mapArena;
	MAPDWORD		m_mapMeetingRoomTime;

#ifdef __HACK_SHIELD
	TCHAR m_szHsbFilePath[ONE_KBYTE];
	AHNHS_SERVER_HANDLE	m_hHackShield;
	void CheckHackShield(CTPlayer * pPlayer);
	DWORD OnCS_HACKSHIELD_REQ(LPPACKETBUF pBUF);
	void LogHackShield(DWORD dwCharID, DWORD dwError, CString strMessage);
#endif

#ifdef __N_PROTECT
	DWORD m_dwNPCSModuleTick;
	BYTE m_bEnableNP;
	void CheckCSNProtect(CTPlayer * pPlayer);
	void UpdateCSModule();
	DWORD OnCS_NPROTECT_REQ(LPPACKETBUF pBUF);
	void LogNProtect(DWORD dwCharID, DWORD dwError, CString strMessage);
#endif

protected:
	MAPPLAYERNAME m_mapPLAYERNAME;					// valid session pool
	QPACKETBUF m_qBATCHJOB;							// queue for batch job
	QPACKETBUF m_qDBJOB;							// queue for DB job
	QPACKETBUF m_qAIJOB;							// queue for AI job
	QPACKETBUF m_qLOGJOB;							// queue for Log job
	VTAIBUF m_vAIBUF;								// AI command pool
	VTGBBUF m_vGBBUF;
	VTAUCTIONBUF m_vTAUCTIONBUF;

	MAPPLAYER m_mapSESSION;							// all session pool
	MAPPLAYER m_mapPLAYER;							// valid session pool
	MAPPLAYER m_mapSUSPENDER;
	MAPDWORD  m_mapACTIVEUSER;

	CRITICAL_SECTION m_csAIQUEUE;					// sync object for AI queue
	CRITICAL_SECTION m_csDBQUEUE;					// sync object for DB queue
	CRITICAL_SECTION m_csQUEUE;						// sync object for batch queue
	CRITICAL_SECTION m_csBATCH;						// sync object for batch thread
	CRITICAL_SECTION m_csLOGQUEUE;					// sync object for LOG queue

protected:
	string m_szGameDSN;
	string m_szDBUserID;
	string m_szGamePasswd;
	int m_wGamePort;

	string m_szWorldIP;
	int m_wWorldPort;

	string m_szLogServerIP;
	int m_wLogServerPORT;
	int m_bServerID;
	int m_bGroupID;


	BYTE m_bNumWorker;
	BYTE m_bThreadRun;
	BYTE m_bBatchRun;
	BYTE m_bDBRun;
	BYTE m_bAIRun;
	BYTE m_bLogRun;

	BYTE m_bNation;

	HANDLE m_hWorker[MAX_THREAD];
	HANDLE m_hControl;
	HANDLE m_hBatch;
	HANDLE m_hDB;
	HANDLE m_hAI;
	HANDLE m_hLog;

	HANDLE m_hBatchEvent;
	HANDLE m_hDBEvent;
	HANDLE m_hAIEvent;
	HANDLE m_hLogEvent;

	HANDLE m_hIocpControl;
	HANDLE m_hIocpWork;
	SOCKET m_accept;

	CTMapSession m_listen;
	CTMapSession m_world;
	CSqlDatabase m_db;

	COverlappedEx m_ovAccept;
	CPacket m_vAccept;
	SOCKADDR_IN m_addrCtrl;
	SOCKADDR_IN m_addrRelay;

	BYTE m_bRelayOn;

	__int64 m_dlGenItemID;

	CDebugSocket *m_pDebugSocket;


	//
	//	Log Server Value
	//
#ifdef DEF_UDPLOG
public:
	CUdpSocket * m_pUdpSocket;
#endif

public:
	DWORD m_dwTick;
	__time64_t m_timeCurrent;

protected:
	void ProcessSession(CTMapSession *pSession, DWORD dwIoBytes);
	void OnSendComplete(CTMapSession *pSession, DWORD dwIoBytes);
	void OnTimer(DWORD dwTick);
	void AuctionTimeCheck();

	void OnInvalidSession(CTMapSession *pSession);			// 사용 금지
	void OnCloseSession(CTMapSession *pSession);			// 사용 금지
	void ClosingSession(CTMapSession *pSession);			// 사용 금지
	void CloseSession(CTMapSession *pSession);				// 세션을 종료하려면 이 함수를 호출

	void SayToBATCH(LPPACKETBUF pBUF);
	void SayToDB(LPPACKETBUF pBUF);
	void SayToAI(LPPACKETBUF pBUF);
	void SayToLOG(LPPACKETBUF pBUF);

	void ClearThread();
	void UpdateData();
	void InitEnvironment();
	void SaveAllCharData();

	DWORD CreateThreads();
	BYTE ResumeThreads();

	DWORD LoadConfig();
	DWORD LoadData();

	DWORD InitNetwork();
	DWORD InitDB();

	BYTE WaitForConnect();
	BYTE Accept();

	DWORD OnReceive(LPPACKETBUF pBUF);

	DWORD ControlThread();
	DWORD BatchThread();
	DWORD WorkThread();
	DWORD DBThread();
	DWORD AIThread();
	DWORD LogThread();

protected:
	virtual void OnERROR(DWORD dwErrorCode);

	virtual DWORD OnEnter();
	virtual void OnExit();

public:

	LPTCASHCATEGORY FindCashCategory(BYTE bCategory);
	BYTE GetNation();
	CString GetSvrMsg(DWORD dwID);
	CString BuildNetString(const CString& strHeader, const CString& strBody);

	BYTE CheckCharName(LPCSTR str);
	void LocalReward();
	void CastleReward(LPTLOCAL pCastle, DWORD dwGuild);

	BYTE UseItem(
		CTPlayer * pPlayer,
		CTInven * pInven,
		CTItem * pItem,
		BYTE bCount);

	__int64 GenItemID();

	DWORD GetItemPrice(LPTITEM pItem);
	DWORD GetItemPvPrice(LPTITEM pItem);

	void WrapItem(
		CPacket * pPacket,
		TITEMQUERY & query);
	void WrapItemQuery(
		CPacket * pPacket,
		TITEMQUERY &item);

	CTItem * CreateItem(CPacket * pPacket);
	CTItem * CreateItem(TITEMQUERY &item);

	BYTE MonMoneyTake(CTPlayer * pPlayer, DWORD dwMonID);
	BYTE MonItemTake(CTPlayer * pPlayer, DWORD dwMonID, BYTE bItemID, BYTE bInvenID, BYTE bSlot);
	void InitMap(CTPlayer *Player);
	DWORD GetPostMoney(BYTE bType);
	void ExitMAP(CTPlayer * pPlayer, BYTE bTeleport = FALSE, WORD wGoMapID = 0);
	void SetItemAttr(CTItem * pItem, BYTE bLevel);
	void SetAlarmTime(CTItem * pItem);
	BYTE MakeSpecialItem(CTPlayer * pPlayer, CTItem * pItem, BYTE bKind, WORD wMagicBuff = 0, BYTE bMakeType = IMT_NONE);
	BYTE SetMagicOpt(CTPlayer * pPlayer, CTItem * pItem, BYTE bOptType, BYTE bMakeType);
	void ResetLocal(LPTLOCAL pLocal, BYTE bCountry, DWORD dwGuildID, CString strGuildName, BYTE bType);
	void ResetMission(LPTLOCAL pLocal, BYTE bCountry, BYTE bType);
	void NotifyLocalInfo(BYTE bType, WORD wID, DWORD dwSecond, CString strLocalName = NAME_NULL, CString strGuildName = NAME_NULL);

	BYTE ChangeSwitch(
		CTMap *pMap,
		DWORD dwSwitchID,
		BYTE bOpen);

	LPTITEM MonChoiceItem(LPTMONITEM pMonItem, BYTE bItemCountry);
	CTItem * MonChoiceMagicItem(LPTMONITEM pMonItem, BYTE bItemCountry);
	CTRecallMon *CreateRecallMon(
		CTPlayer *pPlayer,
		LPTMONSTER pMonTemp,
		DWORD dwATTR,
		DWORD dwID,
		WORD wPetID,
		CString strName,
		BYTE bLevel,
		BYTE bClass,
		BYTE bRace,
		BYTE bAction,
		BYTE bStatus,
		BYTE bMode,
		DWORD dwMaxHP,
		DWORD dwMaxMP,
		DWORD dwHP,
		DWORD dwMP,
		BYTE bHit,
		DWORD dwPysMinPower,
		DWORD dwPysMaxPower,
		DWORD dwMgMinPower,
		DWORD dwMgMaxPower,
		WORD wAttackLevel,
		BYTE bSkillLevel,
		FLOAT fPosX,
		FLOAT fPosY,
		FLOAT fPosZ,
		WORD wDir,
		DWORD dwTime,
		VWORD vSkill,
		BYTE bRecallAuto = FALSE,
		DWORD dwTargetID = NULL,
		BYTE bTargetType = NULL);

	BYTE IsIndunMap(WORD wMapID);
	WORD GetIndunInPos(WORD wMapID);
	WORD GetIndunOutPos(WORD wMapID, BYTE bCountry);

	BYTE GetSvrID();

	void ReleaseSelfMonID(DWORD dwID);
	DWORD LockSelfMonID();

	CTMonsterAI *FindTMonsterAI(BYTE bAIType);
	CTChannel *FindTChannel(
		BYTE bChannel,
		WORD wMapID);

	CTMap *FindTMap(
		BYTE bChannel,
		WORD wPartyID,
		WORD wMapID);

	CTMap *CreateInstanceMAP(
		BYTE bChannel,
		WORD wPartyID,
		WORD wMapID,
		BYTE bCountryID);
	void DeleteInstanceMAP(CTMap *pTMAP);

	LPTAICOMMAND FindTCmdTEMP(DWORD dwCmdID);
	LPTMONSPAWN FindTMonSpawn(WORD wSpawnID);
	LPTMONSTER FindTMonster(WORD wMonID);

	LPTLEVEL FindTLevel(BYTE bLevel);
	LPTSTAT FindTClass(BYTE bClass);
	LPTSTAT FindTRace(BYTE bRace);
	LPTITEM FindTItem(WORD wItemID);
	CTItem * FindTQusetItem(DWORD dwQuestItemID);
	CTSkillTemp * FindTSkill(WORD wSkillID);
	CTNpc * FindTNpc(WORD wNpcID);
	LPTBATTLEZONE FindBattleZone(WORD wLocalID);
	LPTLOCAL FindOccupationZone(WORD wLocalID);
	LPTLOCAL FindCastleZone(WORD wCastleID);
	LPTLOCAL FindMissionZone(WORD wMissionID);
#ifdef SKYGARDEN
	LPTLOCAL FindSkygarden(WORD wLocalID);
#endif
	LPTLOCAL FindLocal(WORD wLocalID);
	LPTLOCAL FindOccupation(WORD wLocal);
	LPTLOCAL FindCastle(WORD wCastle);
	LPTLOCAL FindMission(WORD wMissionID);
	LPTMONATTR FindMonAttr(DWORD dwID);

	LPQUESTTEMP FindQuestTemplate(DWORD dwQuestID);
	void LoadQuestTemp(LPQUESTTEMP pQUEST);
	void AddQuestTemp(LPQUESTTEMP pQUEST);
	void CheckLocalEnv(CTPlayer * pPlayer);

	BYTE Teleport(
		CTPlayer *pPlayer,
		WORD wSpawnID);

	BYTE Teleport(
		CTPlayer *pPlayer,
		BYTE bChannel,
		WORD wMapID,
		FLOAT fPosX,
		FLOAT fPosY,
		FLOAT fPosZ);

	BYTE IsOperator(DWORD dwID);
	LPTITEMMAGIC GetItemMagic(BYTE bKind, BYTE bMagic);
	LPTITEMMAGIC GetItemMagic(BYTE bMagic);

	BYTE PostReturn(
		CString strChar,
		DWORD dwPostID,
		DWORD dwNewID,
		CString strRecvName,
		BYTE bType,
		CString strSender,
		CString strTitle);

	void ReviewMonItemList(DWORD dwID, CTMonster * pMON);
	void PartyMonItemTake(CTPlayer * pPlayer, CTItem *pItem);
	void PartyChiefItemTake(CTPlayer * pChief, CTPlayer * pTarget, CTMonster * pMon, CTInven *pInven, CTItem *pItem);
	DWORD GetFormulaInit(BYTE bFormula);
	FLOAT GetFormulaRateX(BYTE bFormula);
	FLOAT GetFormulaRateY(BYTE bFormula);

	BYTE GetDiscountRate(CTPlayer* pPlayer, CTNpc* pNpc);
	BYTE CalcProb(CTPlayer* pPlayer, CTNpc* pNpc, BYTE bType, BYTE bBaseProb);

	CTSkillTemp * RandTransSkill(CTSkillTemp * pTemp);
	CTSkillTemp * RandBuffSkill(CTSkillTemp * pTemp);

	BYTE CheckMapLevel(CTPlayer * pPlayer);
	BYTE CheckMapGuild(CTPlayer * pPlayer);

	int Timer(int Intervall);

	BYTE CheckMonthRank(CTPlayer * pPlayer, BYTE bCountry, DWORD dwMonthPoint, DWORD dwTotalPoint);

	void AddEvent(EVENTINFO &stEVENT);
	void DelEvent(BYTE bEventID);
	void DelEvent(DWORD dwIndex);
	LPEVENTINFO GetEventInfo(BYTE bEventID);
	LPEVENTINFO GetEventInfo(DWORD dwIndex);

	LPTOURNAMENT FindTournament(BYTE bEntryID);
	void ClearTournamentPlayer();
	WORD GetTournamentMap(DWORD dwCharID, BYTE bGroup);
	BYTE IsTournamentMap(WORD wMapID);
	BYTE GetTournamentStep();
	BYTE CanDoTournament(BYTE bStep);
	LPTOURNAMENTPLAYER FindTournamentPlayer(DWORD dwCharID, BYTE bActive = FALSE);
	void SetTournamentResult(BYTE bStep, LPTOURNAMENTPLAYER pPlayer, BYTE bResult);
	BYTE IsActiveTournamentMap(WORD wMapID);
	void GetTournamentMapList(LPVTMAP vMAP);
	BYTE CanApplyTournament(CTPlayer * pPlayer, BYTE bEntryID);
	BYTE ApplyTournament(LPTOURNAMENT pTour, CTPlayer * pPlayer, BYTE bEntryID);
	WORD GetTNMTPlayerLounge(CTPlayer * pPlayer);
	WORD GetLoungeMapID();
	BYTE GetHelpMessage(CTPlayer * pPlayer, CString & strMessage);
	BYTE CheckPeaceZone(CTPlayer * pPlayer);
	void EraseMissionSkill(CTPlayer * pPlayer);
	void LogMapEvent(DWORD dwV1, DWORD dwV2, CString strV3);
	void ArenaEnd(LPTARENA pArena, CTPlayer * pPlayer);
	BYTE IsMainCell(BYTE bChannel, WORD wMapID, FLOAT fPosX, FLOAT fPosZ);

	////////////////////////////////////////////////
	// Batch thread에서만 사용가능
	CTPlayer *FindPlayer(
		DWORD dwCharID,
		DWORD dwKEY);
	CTPlayer * FindPlayer(
		CString strName);
	void CheckQuest(CTPlayer * pPlayer,
		DWORD dwTargetID,
		FLOAT fPosX,
		FLOAT fPosY,
		FLOAT fPosZ,
		DWORD dwTermID,
		BYTE bTermType,
		BYTE bTriggerType,
		BYTE bCount);

	void QuestDropItem(
		VQUESTTEMP vQuestDropItem,
		VPLAYER vGetChar,
		DWORD dwMonID,
		CTMap * pMAP);

	CTObjBase * FindTarget(
		CTPlayer * pHost,
		BYTE bType,
		DWORD dwID);
	CTPlayer * FindChar(DWORD dwCharID);
	void SetEventCloseSession(CTMapSession * pSession, BYTE bSave);

	DWORD GetDuelID();
	void PvPEvent(BYTE bEvent, void * pObject, DWORD dwTargetID);
	void LocalRecord(LPTLOCAL pLocal, CTPlayer * pPlayer, BYTE bEvent, DWORD dwPoint, BYTE bGain);
	void MissionReward(LPTLOCAL pLocal, BYTE bType, BYTE bCountry);
#ifdef SKYGARDEN
	void SkygardenReward(LPTLOCAL pLocal, BYTE bType, BYTE bCountry);
#endif
	void SetEntryRecord(TENTRYRECORD & rec, BYTE bGain, BYTE bEvent, DWORD dwPoint);

	DWORD CalcCastlePoint(DWORD dwWarPoint, WORD wLocalPoint, WORD wKillPoint);
	void EndWar(LPTLOCAL pCastle, CTMap * pMap, BYTE bType);
	BYTE CanApplyCastle(LPTLOCAL pCastle);
	BYTE CanEnterCastle(LPTLOCAL pCastle);
	BYTE IsCastleMap(CTMap * pMap);
#ifdef SKYGARDEN
	BYTE IsSkyGarden(CTMap * pMap);
#endif
	void LeaveCastleMap(CTMap * pMap);
	void DelMonSpawn(CTMap * pMap, WORD wSpawnID, BYTE bErase = FALSE);
	void AddMonSpawn(CTMap * pMap, WORD wSpawnID, BYTE bStatus);
	void GetLocalList(BYTE bType, LPVTLOCAL pLocal);
	BYTE SetTutorialCharBase(CTPlayer * pPlayer);
	void SetTutorialCharItem(CTPlayer * pPlayer);
	BYTE EquipItemRevision(CTPlayer * pPlayer, BYTE bRevision, BYTE bLevel);
	void RPSReward(CTPlayer * pPlayer, BYTE bGiveup = TRUE);
	BYTE SelectNpcRPS(BYTE bResult, BYTE bPlayerRPS);
	void CheckMeetingRoom(CTPlayer * pPlayer, BYTE bForce);
	BYTE IsChiefMeetingRoom(CTPlayer * pPlayer);
	BYTE IsMeetingRoom(WORD wMapID, BYTE bIsSmall);
	WORD RegenDynamicMonster(WORD wMapID, WORD wMonID, FLOAT fPosX, FLOAT fPosY, FLOAT fPosZ, DWORD dwDelay, BYTE bRoamType);
	void ArenaLeave(CTPlayer * pPlayer);

	////////////////////////////////////////////////

	void DoAICMD(
		CTAICommand *pCMD,
		CTMonster *pMON,
		DWORD dwEventHost,
		DWORD dwRHId,
		BYTE bRHType,
		DWORD dwTriggerID);

	void DoGBCMD(BYTE bCmd, LPTGODBALL pGodBall, CString strCharName = NAME_NULL);

#ifdef DEF_UDPLOG
	BYTE GetServerID() { return m_bServerID; };
	void TournamentResultLog(DWORD dwWinner, DWORD dwLoser, BYTE bStep);
#endif

	void SaveCharKill(LPTRECORDSET pRec, DWORD dwKillerID);

private:
	static DWORD WINAPI _ControlThread(LPVOID lpParam);
	static DWORD WINAPI _BatchThread(LPVOID lpParam);
	static DWORD WINAPI _WorkThread(LPVOID lpParam);
	static DWORD WINAPI _DBThread(LPVOID lpParam);
	static DWORD WINAPI _AIThread(LPVOID lpParam);
	static DWORD WINAPI _LogThread(LPVOID lpParam);

protected:
	// Control Server Message
	DWORD OnCT_SERVICEMONITOR_ACK(LPPACKETBUF pBUF);
	DWORD OnCT_ANNOUNCEMENT_ACK(LPPACKETBUF pBUF); // 현승룡 공지사항
	DWORD OnCT_USERKICKOUT_ACK(LPPACKETBUF pBUF); // 현승룡 유저 강제퇴장
	DWORD OnCT_USERMOVE_ACK(LPPACKETBUF pBUF); // 현승룡 유저 위치이동
	DWORD OnCT_MONSPAWNFIND_ACK(LPPACKETBUF pBUF); // 현승룡 몬스터 관리
	DWORD OnCT_MONACTION_ACK(LPPACKETBUF pBUF);
	DWORD OnCT_SERVICEDATACLEAR_ACK(LPPACKETBUF pBUF);
	DWORD OnCT_CTRLSVR_REQ(LPPACKETBUF pBUF);
	DWORD OnCT_CASTLEINFO_REQ(LPPACKETBUF pBUF);


	// AI request message handler (Execute on AI thread)
	DWORD OnSM_MEETINGROOM_REQ(LPPACKETBUF pBUF);
	DWORD OnSM_AICMD_REQ(LPPACKETBUF pBUF);
	DWORD OnSM_SWITCHSTART_REQ(LPPACKETBUF pBUF);
	DWORD OnSM_POSTBILL_REQ(LPPACKETBUF pBUF);
	DWORD OnSM_POSTBILLERASE_REQ(LPPACKETBUF pBUF);
	DWORD OnSM_DUELSTART_REQ(LPPACKETBUF pBUF);
	DWORD OnSM_DUELEND_REQ(LPPACKETBUF pBUF);
	DWORD OnSM_RESETHOST_REQ(LPPACKETBUF pBUF);
	DWORD OnSM_GODBALLCMD_REQ(LPPACKETBUF pBUF);
	DWORD OnSM_AUCTIONCMD_REQ(LPPACKETBUF pBUF);
	DWORD OnSM_AUCTIONCMDDEL_REQ(LPPACKETBUF pBUF);
	DWORD OnSM_VALIDMAPSESSION_REQ(LPPACKETBUF pBUF);

	// AI acknowledge message handler (Execute on BATCH thread)
	DWORD OnSM_MEETINGROOM_ACK(LPPACKETBUF pBUF);
	DWORD OnSM_AICMD_ACK(LPPACKETBUF pBUF);
	DWORD OnSM_POSTBILL_ACK(LPPACKETBUF pBUF);
	DWORD OnSM_DUELSTART_ACK(LPPACKETBUF pBUF);
	DWORD OnSM_DUELEND_ACK(LPPACKETBUF pBUF);
	DWORD OnSM_DUELCOMPLETE_ACK(LPPACKETBUF pBUF);
	DWORD OnSM_RESETHOST_ACK(LPPACKETBUF pBUF);
	DWORD OnSM_GODBALLCMD_ACK(LPPACKETBUF pBUF);

	// System message handler
	DWORD OnSM_QUITSERVICE_REQ(LPPACKETBUF pBUF);
	DWORD OnSM_DELSESSION_REQ(LPPACKETBUF pBUF);
	DWORD OnSM_SWITCHCHANGE_REQ(LPPACKETBUF pBUF);
	DWORD OnSM_TIMER_REQ(LPPACKETBUF pBUF);

	// World server message handler
	DWORD OnMW_MONTHRANKRESETCHAR_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_ENTERSOLOMAP_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_INVALIDCHAR_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_RELEASEMAIN_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_MAPSVRLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_ADDCONNECT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CHECKMAIN_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_ENTERCHAR_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CONRESULT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CLOSECHAR_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_ROUTELIST_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_ENTERSVR_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CHARDATA_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CHARINFO_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_TELEPORT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CONLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_DELCHAR_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_ROUTE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CHGPARTYTYPE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_PARTYADD_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_PARTYJOIN_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_PARTYDEL_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_PARTYMANSTAT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_LEVELUP_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_EVENTQUARTER_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_HELMETHIDE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_PARTYMEMBERRECALL_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_PARTYMEMBERRECALLANS_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_RELAYCONNECT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GAINPVPPOINT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_RPSGAMECHANGE_REQ(LPPACKETBUF pBUF);

	///////////////////////////////////////////////////////////////////////////////////////////////////
	// 길드
	DWORD OnMW_GUILDESTABLISH_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDDISORGANIZATION_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDINVITE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDINVITEANSWER_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDJOIN_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDDUTY_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDPEER_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDLEAVE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDMEMBERLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDINFO_REQ(LPPACKETBUF pBUF);

	DWORD OnMW_GUILDCABINETLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDCONTRIBUTION_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDARTICLELIST_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDARTICLEADD_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDARTICLEDEL_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDARTICLEUPDATE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDFAME_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDWANTEDADD_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDWANTEDDEL_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDWANTEDLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDVOLUNTEERING_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDVOLUNTEERINGDEL_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDVOLUNTEERLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDVOLUNTEERREPLY_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDTACTICSWANTEDADD_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDTACTICSWANTEDDEL_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDTACTICSWANTEDLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDTACTICSVOLUNTEERING_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDTACTICSVOLUNTEERINGDEL_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDTACTICSVOLUNTEERLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDTACTICSREPLY_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDTACTICSKICKOUT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDTACTICSINVITE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDTACTICSANSWER_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDTACTICSLIST_REQ(LPPACKETBUF pBUF);
	///////////////////////////////////////////////////////////////////////////////////////////////////

	DWORD OnMW_CHAT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_MONSTERDIE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_TAKEMONMONEY_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_ADDITEM_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_ADDITEMRESULT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_PARTYORDERTAKEITEM_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_FRIENDLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_FRIENDCONNECTION_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_FRIENDREGION_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_FRIENDADD_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_FRIENDASK_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_FRIENDERASE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_FRIENDGROUPMAKE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_FRIENDGROUPDELETE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_FRIENDGROUPCHANGE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_FRIENDGROUPNAME_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CHGPARTYCHIEF_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_PARTYATTR_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CHGSQUADCHIEF_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CHARSTATINFO_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CHARSTATINFOANS_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_LOCALENABLE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_LOCALOCCUPY_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CASTLEOCCUPY_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_MISSIONOCCUPY_REQ(LPPACKETBUF pBUF);
#ifdef SKYGARDEN
	DWORD OnMW_SKYGARDENOCCUPY_REQ(LPPACKETBUF pBUF);
#endif
	DWORD OnMW_CHGCORPSCOMMANDER_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CORPSASK_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CORPSREPLY_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CORPSJOIN_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_ADDSQUAD_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_DELSQUAD_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_DELCORPSUNIT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_ADDCORPSUNIT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CORPSCMD_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CORPSENEMYLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_MOVECORPSENEMY_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_MOVECORPSUNIT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_ADDCORPSENEMY_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_DELCORPSENEMY_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CORPSHP_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_REPORTENEMYLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_PARTYMOVE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_TMSRECV_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_TMSINVITEASK_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_TMSINVITE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_TMSOUT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_TMSINIT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_TMSADDMEMBER_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_TMSINFO_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_POSTRECV_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CASTLEENABLE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CASTLEAPPLY_REQ(LPPACKETBUF pBUF);
#ifdef SKYGARDEN
	DWORD OnMW_SKYGARDENENABLE_REQ(LPPACKETBUF pBUF);
#endif
	DWORD OnMW_MONTEMPT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_MONTEMPTEVO_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GETBLOOD_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_DEALITEMERROR_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_MAGICMIRROR_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CREATERECALLMON_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_RECALLMONDEL_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_USERPOSITION_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_STARTTELEPORT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_PETRIDING_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_SOULMATE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_SOULMATESEARCH_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_SOULMATEREG_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_SOULMATEEND_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CASTLEWARINFO_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_ENDWAR_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CHATBAN_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_RECALLMONDATA_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CHANGECHARBASE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_HEROSELECT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CHARMSG_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_ITEMSTATE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDPOINTLOG_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDPOINTREWARD_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_GUILDPVPRECORD_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_MONSTERBUY_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CASTLEGUILDCHG_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_EVENTUPDATE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_EVENTMSG_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_EVENTMSGLOTTERY_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CASHSHOPSTOP_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CASHITEMSALE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_WORLDPOSTSEND_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CASTLEAPPLICANTCOUNT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_MONTHRANKLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_MONTHRANKRESET_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_MONTHRANKUPDATE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_FAMERANKUPDATE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_WARLORDSAY_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_FIRSTGRADEGROUP_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_TERMINATE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_TOURNAMENT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_TOURNAMENTENABLE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_TOURNAMENTINFO_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_TOURNAMENTMATCH_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_TOURNAMENTRESULT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_TOURNAMENTBATPOINT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_HELPMESSAGE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_MISSIONENABLE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_RPSGAME_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_WARCOUNTRYBALANCE_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_MEETINGROOM_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CMGIFT_REQ(LPPACKETBUF pBUF);
	DWORD OnMW_CMGIFTRESULT_REQ(LPPACKETBUF pBUF);

	//Apex
	DWORD OnMW_APEXDATA_REQ(LPPACKETBUF pBUF);

	// DB request message handler (Execute on DB thread)
	DWORD OnDM_ENTERMAPSVR_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_LOADCHAR_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_LOADPOSTMESSAGE_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_SAVECHAR_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_SAVEITEM_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_LOGOUT_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_CLEARTITLE_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_SAVETITLE_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_ROUTE_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_CABINETITEM_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_POSTLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_LOCALOCCUPY_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_CASTLEOCCUPY_REQ(LPPACKETBUF pBUF);
#ifdef SKYGARDEN
	DWORD OnDM_SKYGARDENOCCUPY_REQ(LPPACKETBUF pBUF);
#endif
	DWORD OnDM_MISSIONOCCUPY_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_POSTCANSEND_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_POSTRECV_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_POSTDEL_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_POSTGETITEM_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_CLEARCURRENTUSER_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_CREATERECALLMON_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_RECALLMONDEL_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_LOGSKILL_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_PETDEL_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_TELEPORT_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_SMSSEND_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_EVENTQUARTER_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_CASHITEMCABINET_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_CASHITEMGET_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_CASHSHOPITEMLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_CASHITEMBUY_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_ACTEND_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_CASHCABINETBUY_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_CASHITEMPUTIN_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_DELETEDEALITEM_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_POSTINVENITEM_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_SAVECHARBASE_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_CHECKCHANGENAME_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_STOPTHECLOCK_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_HEROSELECT_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_QUESTSENDPOST_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_AUCTIONREG_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_AUCTIONEND_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_AUCTIONREGCANCEL_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_AUCTIONBID_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_AUCTIONBUYDIRECT_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_GAINCASHBONUS_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_WARLORDSAY_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_MONTHPVPOINTRESET_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_POSTVIEW_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_POSTBILL_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_POSTBILLUPDATE_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_TOURNAMENTREWARD_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_SAVECHARPOSITION_REQ(LPPACKETBUF pBUF);

	////////////////////////////////////////////////////////////
	// 길드
	DWORD OnDM_GUILDCABINETPUTIN_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_GUILDCABINETTAKEOUT_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_GUILDCABINETROLLBACK_REQ(LPPACKETBUF pBUF);
	////////////////////////////////////////////////////////////

	DWORD OnDM_SAVEEXP_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_SAVEMONEY_REQ(LPPACKETBUF pBUF);

	// DB acknowledge message handler (Execute on BATCH thread)
	DWORD OnDM_DORELEASEMAIN_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_ENTERMAPSVR_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_LOADCHAR_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_LOADPOSTMESSAGE_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_ROUTE_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_CABINETITEM_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_POSTLIST_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_POSTCANSEND_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_LOCALOCCUPY_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_CASTLEOCCUPY_ACK(LPPACKETBUF pBUF);
#ifdef SKYGARDEN
	DWORD OnDM_SKYGARDENOCCUPY_ACK(LPPACKETBUF pBUF);
#endif
	DWORD OnDM_MISSIONOCCUPY_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_CREATERECALLMON_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_TELEPORT_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_CLEARCURRENTUSER_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_PROTECTEDADD_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_PROTECTEDADD_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_PROTECTEDERASE_REQ(LPPACKETBUF pBUF);
	DWORD OnDM_POSTRECV_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_SMSSEND_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_CASHITEMCABINET_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_CASHITEMGET_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_CASHSHOPITEMLIST_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_CASHITEMBUY_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_CASHCABINETBUY_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_CASHITEMPUTIN_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_POSTINVENITEM_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_CHECKCHANGENAME_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_STOPTHECLOCK_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_HEROSELECT_ACK(LPPACKETBUF pBUF);

	DWORD OnDM_AUCTIONREG_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_AUCTIONREGCANCEL_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_AUCTIONBID_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_AUCTIONEND_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_AUCTIONBUYDIRECT_ACK(LPPACKETBUF pBUF);

	DWORD OnDM_GAINCASHBONUS_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_WARLORDSAY_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_POSTVIEW_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_POSTDEL_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_POSTBILLUPDATE_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_TOURNAMENTREWARD_ACK(LPPACKETBUF pBUF);

	DWORD OnDM_CMGIFTLOG_REQ(LPPACKETBUF pBUF);

	////////////////////////////////////////////////////////////
	// 길드
	DWORD OnDM_GUILDCABINETPUTIN_ACK(LPPACKETBUF pBUF);
	DWORD OnDM_GUILDCABINETTAKEOUT_ACK(LPPACKETBUF pBUF);
	////////////////////////////////////////////////////////////

#ifdef DEF_UDPLOG
	DWORD OnDM_UDPLOG_REQ(LPPACKETBUF pBUF);
#endif

protected:
	// CS message handler
	DWORD OnCS_CONREADY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CONNECT_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_KICKOUT_REQ(LPPACKETBUF pBUF);

	DWORD OnCS_BLOCK_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_MOVE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_JUMP_REQ(LPPACKETBUF pBUF);

	DWORD OnCS_MONMOVE_REQ(LPPACKETBUF pBUF);

	DWORD OnCS_REVIVAL_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_ENTERLB_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_LEAVELB_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_ENTERAB_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_LEAVEAB_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CHGMODE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_ACTION_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_DEFEND_REQ(LPPACKETBUF pBUF);

	DWORD OnCS_MOVEITEM_REQ(LPPACKETBUF pBUF);

	DWORD OnCS_SKILLBUY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_SKILLUSE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_LOOPSKILL_REQ(LPPACKETBUF pBUF);

	DWORD OnCS_CHGPARTYCHIEF_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CHGPARTYTYPE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_PARTYADD_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_PARTYJOIN_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_PARTYDEL_REQ(LPPACKETBUF pBUF);

	DWORD OnCS_QUESTEXEC_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_QUESTDROP_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_QUESTENDTIMER_REQ(LPPACKETBUF pBUF);

	///////////////////////////////////////////////////////////////////////////////
	// 길드
	DWORD OnCS_GUILDESTABLISH_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDDISORGANIZATION_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDDUTY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDPEER_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDINVITE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDINVITEANSWER_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDLEAVE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDKICKOUT_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDMEMBERLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDINFO_REQ(LPPACKETBUF pBUF);

	DWORD OnCS_GUILDLOCALLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDLOCALRETURN_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDCABINETLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDCABINETPUTIN_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDCABINETTAKEOUT_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDCONTRIBUTION_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDARTICLELIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDARTICLEADD_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDARTICLEDEL_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDARTICLEUPDATE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDFAME_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDWANTEDADD_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDWANTEDDEL_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDWANTEDLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDVOLUNTEERING_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDVOLUNTEERINGDEL_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDVOLUNTEERLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDVOLUNTEERREPLY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDTACTICSWANTEDADD_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDTACTICSWANTEDDEL_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDTACTICSWANTEDLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDTACTICSVOLUNTEERING_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDTACTICSVOLUNTEERINGDEL_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDTACTICSVOLUNTEERLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDTACTICSREPLY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDTACTICSKICKOUT_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDTACTICSINVITE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDTACTICSANSWER_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDTACTICSLIST_REQ(LPPACKETBUF pBUF);
	///////////////////////////////////////////////////////////////////////////////

	DWORD OnCS_CHAT_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CABINETPUTIN_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CABINETTAKEOUT_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CABINETLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CABINETITEMLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CABINETOPEN_REQ(LPPACKETBUF pBUF);

	DWORD OnCS_TELEPORT_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_NPCITEMLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_ITEMBUY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_MAGICITEMBUY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_ITEMSELL_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_MONITEMLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_MONITEMTAKE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_MONMONEYTAKE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_MONITEMLOTTERY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_QUESTLIST_POSSIBLE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_PROTECTEDADD_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_PROTECTEDERASE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_FRIENDASK_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_FRIENDREPLY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_FRIENDERASE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_HOTKEYADD_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_HOTKEYDEL_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CHARSTATINFO_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CANCELACTION_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_ITEMUPGRADE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CHGCORPSCOMMANDER_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CORPSLEAVE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CORPSASK_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CORPSREPLY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CORPSCMD_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CORPSENEMYLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_MOVECORPSENEMY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_MOVECORPSUNIT_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_ADDCORPSENEMY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_DELCORPSENEMY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CORPSHP_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_PARTYMOVE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_FRIENDGROUPMAKE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_FRIENDGROUPDELETE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_FRIENDGROUPCHANGE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_FRIENDGROUPNAME_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_TMSSEND_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_TMSINVITE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_TMSOUT_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_POSTSEND_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_POSTVIEW_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_POSTDEL_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_POSTGETITEM_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_POSTRETURN_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CASTLEAPPLY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_ITEMUSE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_NPCTALK_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_DELRECALLMON_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CHGMODERECALLMON_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_INVENADD_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_INVENDEL_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_INVENMOVE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_RESETHOST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_SWITCHCHANGE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_REGION_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_SKILLEND_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_REVIVALASK_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_DROPDAMAGE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_SETRETURNPOS_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_DEALITEMASK_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_DEALITEMRLY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_DEALITEMADD_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_DEALITEM_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_STOREOPEN_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_STORECLOSE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_STOREITEMLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_STOREITEMBUY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_PETMAKE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_PETDEL_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_PETRECALL_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_PETRIDING_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_OTHERSELF_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_DISCONNECT_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CHGCHANNEL_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CANCELSKILL_REQ(LPPACKETBUF pBUF);

	DWORD OnCS_DUELINVITE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_DUELINVITEREPLY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_DUELEND_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GETTARGET_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GETTARGETANS_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_MONITEMTAKEALL_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_SMSSEND_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_SKILLINIT_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_SKILLINITPOSSIBLE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_HELMETHIDE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_PARTYMEMBERRECALL_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_PARTYMEMBERRECALLANS_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CASHITEMCABINET_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CASHITEMGET_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CASHSHOPITEMLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_TITLELIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CASHITEMBUY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CASHITEMPRESENT_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_SOULMATESEARCH_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_SOULMATEREGREADY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_SOULMATEREG_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_SOULMATEEND_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GAMBLECHECK_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GAMBLEOPEN_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_TAKEGODBALL_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_MOUNTGODBALL_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_DEMOUNTGODBALL_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_DURATIONREP_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_REFINE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_ACTEND_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CASHCABINETBUY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CASHITEMPUTIN_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CHANGENAME_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CHANGETITLE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_STOPTHECLOCK_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_HEROSELECT_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_HEROLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_TERMINATE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CHECKRELAY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_COMMENT_REQ(LPPACKETBUF pBUF);

	DWORD OnCS_GUILDPOINTLOG_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDPOINTREWARD_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_GUILDPVPRECORD_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_PVPRECORD_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_MONSTERBUY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_PROTECTEDOPTION_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_FRIENDLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_ITEMCHANGE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_COUNTDOWN_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_WASTEREFINE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_PETCANCEL_REQ(LPPACKETBUF pBUF);

	DWORD OnCS_AUCTIONREG_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_AUCTIONINTEREST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_AUCTIONINTERESTLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_AUCTIONBIDLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_AUCTIONREGCANCEL_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_AUCTIONBID_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_AUCTIONBUYDIRECT_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_AUCTIONFIND_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_AUCTIONREGLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_KICKOUTMAP_REQ(LPPACKETBUF pBUF);

	DWORD OnCS_REGGUILDCLOAK_REQ(LPPACKETBUF pBUF);

	DWORD OnCS_FAMERANKLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_MONTHRANKLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_WARLORDSAY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_FIRSTGRADEGROUP_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CHATBAN_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_POSTLIST_REQ(LPPACKETBUF pBUF);

	DWORD OnCS_TOURNAMENTAPPLYINFO_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_TOURNAMENTAPPLY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_TOURNAMENTJOINLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_TOURNAMENTPARTYLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_TOURNAMENTPARTYADD_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_TOURNAMEMTMATCHLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_TOURNAMENTEVENTLIST_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_TOURNAMENTEVENTINFO_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_TOURNAMENTEVENTJOIN_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_TOURNAMENTCHEER_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_TOURNAMENTPARTYDEL_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_TOURNAMENTSCHEDULE_REQ(LPPACKETBUF pBUF);

	DWORD OnCS_RPSSTART_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_RPSGAME_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_ACDCLOSE_REQ(LPPACKETBUF pBUF);

	DWORD OnCS_CHANGECOUNTRY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_WARCOUNTRYBALANCE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_MEETINGROOM_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_ARENA_REQ(LPPACKETBUF pBUF);

	DWORD OnCS_CMMOVE_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_CMMOVETOUSER_REQ(LPPACKETBUF pBUF);

	DWORD OnCS_CMGIFT_REQ(LPPACKETBUF pBUF);

	//APEX
	DWORD OnCS_APEXDATA_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_APEXSTART_REQ(LPPACKETBUF pBUF);

	//DWORD OnCS_HACKINFO_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_WINLDIC_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_SOULLOTTERY_REQ(LPPACKETBUF pBUF);
	DWORD OnCS_SOULLOTTERY_TRIGGER_REQ(LPPACKETBUF pBUF);

public:
	// AI request message sender (Call on BATCH thread)
	void SendSM_MEETINGROOM_REQ(
		BYTE bType,
		DWORD dwCharID);

	void SendSM_AICMD_REQ(
		DWORD dwAICmdHandle,
		DWORD dwHostKEY,
		DWORD dwEventHost,
		DWORD dwRHId,
		BYTE bRHType,
		DWORD dwDelay,
		DWORD dwMonID,
		BYTE bChannel,
		WORD wMapID,
		WORD wPartyID);

	void SendSM_SWITCHSTART_REQ(
		BYTE bChannel,
		WORD wPartyID,
		WORD wMapID,
		DWORD dwID,
		DWORD dwDuration);

	void SendSM_GODBALLCMD_REQ(
		WORD wGodBall,
		BYTE bCmd,
		BYTE bChannel,
		WORD wMapID,
		WORD wCastle,
		DWORD dwDelay,
		DWORD dwKey,
		CString strCharName = NAME_NULL);

	void SendSM_POSTBILL_REQ(DWORD dwCharID, DWORD dwPostID, __int64 timeDel);
	void SendSM_POSTBILLERASE_REQ(DWORD dwCharID, DWORD dwPostID);

	void SendSM_DUELSTART_REQ(DWORD dwDuelID, DWORD dwInviter, CString strInviter, DWORD dwTarget, CString strTarget);
	void SendSM_DUELEND_REQ(DWORD dwDuelID, DWORD dwLoser);
	void SendSM_RESETHOST_REQ(
		BYTE bChannel,
		WORD wMapID,
		WORD wPartyID,
		DWORD dwID);

	void SendSM_AUCTIONCMD_REQ(
		WORD wNpcID,
		DWORD dwAuctionID,
		__time64_t dEndTime);

	// AI acknowledge message sender (Call on AI thread)
	void SendSM_AICMD_ACK(
		DWORD dwAICmdHandle,
		DWORD dwHostKEY,
		DWORD dwEventHost,
		DWORD dwRHId,
		BYTE bRHType,
		DWORD dwMonID,
		BYTE bChannel,
		WORD wMapID,
		WORD wPartyID);

	void SendSM_GODBALLCMD_ACK(
		WORD wGodBall,
		BYTE bCmd,
		DWORD dwKey,
		BYTE bChannel,
		WORD wMapID,
		WORD wCastle,
		CString strCharName);

	// World server message sender

	void SendMW_ARENAJOIN_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		BYTE bJoin,
		VDWORD & vParty);

	void SendMW_MONTHRANKRESETCHAR_ACK(
		DWORD dwCharID);

	void SendMW_PETRIDING_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		DWORD dwRiding);

	void SendMW_CREATERECALLMON_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwMonID,
		WORD wMon,
		DWORD dwATTR,
		WORD wPetID,
		CString strName,
		DWORD dwTime,
		BYTE bLevel,
		BYTE bClass,
		BYTE bRace,
		BYTE bAction,
		BYTE bStatus,
		BYTE bMode,
		DWORD dwMaxHP,
		DWORD dwMaxMP,
		DWORD dwHP,
		DWORD dwMP,
		BYTE bHit,
		BYTE bSkillLevel,
		FLOAT fPosX,
		FLOAT fPosY,
		FLOAT fPosZ,
		WORD wDir,
		VWORD vSkill,
		BYTE bRecallAuto = FALSE,
		DWORD dwTargetID = NULL,
		BYTE bTargetType = NULL);

	void SendMW_RECALLMONDEL_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		DWORD dwMonID);

	void SendMW_MAGICMIRROR_ACK(
		WORD wParty,
		BYTE bCountry,
		BYTE bAidCountry,
		BYTE bClass,
		CPacket * pPacket);

	void SendMW_DEALITEMERROR_ACK(
		CString strTarget,
		CString strErrorChar,
		BYTE bError);

	void SendMW_ADDITEMRESULT_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		BYTE bServerID,
		BYTE bChannelID,
		WORD wMapID,
		DWORD dwMonID,
		BYTE bItemID,
		BYTE bResult);

	void SendMW_CONNECT_ACK();

	void SendMW_ADDCHAR_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwIPAddr,
		WORD wPort,
		DWORD dwUserID);

	void SendMW_CHARDATA_ACK(CTPlayer * pPlayer);

	void SendMW_ENTERCHAR_ACK(
		DWORD dwCharID,
		DWORD dwKEY);

	void SendMW_CHECKMAIN_ACK(
		DWORD dwCharID,
		DWORD dwKEY);

	void SendMW_ENTERSVR_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		CString strNAME,
		BYTE bLevel,
		BYTE bRealSex,
		BYTE bClass,
		BYTE bRace,
		BYTE bSex,
		BYTE bFace,
		BYTE bHair,
		BYTE bHelmetHide,
		BYTE bCountry,
		BYTE bAidCountry,
		DWORD dwRegion,
		BYTE bChannel,
		WORD wMapID,
		FLOAT fPosX,
		FLOAT fPosY,
		FLOAT fPosZ,
		BYTE bLogout,
		BYTE bSave,
		BYTE bResult,
		WORD wTitleID,
		DWORD dwUserIP = 0);

	void SendMW_CLOSECHAR_ACK(
		DWORD dwCharID,
		DWORD dwKEY);

	void SendMW_MAPSVRLIST_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		LPMAPBYTE pSERVER);

	void SendMW_CHECKCONNECT_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		BYTE bChannel,
		WORD wMapID,
		FLOAT fPosX,
		FLOAT fPosY,
		FLOAT fPosZ,
		LPMAPBYTE pSERVER);

	void SendMW_CONLIST_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		LPMAPBYTE pSERVER);

	void SendMW_RELEASEMAIN_ACK(BYTE bDBLoad, CTPlayer * pPlayer);

	void SendMW_CHGPARTYCHIEF_ACK(
		DWORD dwChiefID,
		DWORD dwKEY,
		DWORD dwTargetId);

	void SendMW_CHGPARTYTYPE_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		BYTE bPartyType);

	void SendMW_PARTYADD_ACK(
		CString strOrigin,
		CString strTarget,
		BYTE bObtaintype,
		DWORD dwMaxHP,
		DWORD dwHP,
		DWORD dwMaxMP,
		DWORD dwMP);

	void SendMW_PARTYJOIN_ACK(
		CString strOrigin,
		CString strTarget,
		BYTE bObtainType,
		BYTE bResponse,
		DWORD dwMaxHP,
		DWORD dwHP,
		DWORD dwMaxMP,
		DWORD dwMP);

	void SendMW_PARTYDEL_ACK(
		WORD wPartyID,
		DWORD dwTarget,
		BYTE bKick);

	void SendMW_PARTYMANSTAT_ACK(
		WORD wPartyID,
		DWORD dwID,
		BYTE bType,
		BYTE bLevel,
		DWORD dwMaxHP,
		DWORD dwCurHP,
		DWORD dwMaxMP,
		DWORD dwCurMP);

	void SendMW_LEVELUP_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		BYTE bLevel);

	void SendMW_TELEPORT_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		BYTE bServerID);

	void SendMW_FRIENDLIST_ACK(
		DWORD dwCharID,
		DWORD dwKEY);

	//////////////////////////////////////////////////////////////////////////////////
	// 길드
	void SendMW_GUILDESTABLISH_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		CString strName);
	void SendMW_GUILDDISORGANIZATION_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		BYTE bRet);
	void SendMW_GUILDINVITE_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		CString strTarget);
	void SendMW_GUILDINVITEANSWER_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		BYTE bAnswer,
		DWORD dwInviter);
	void SendMW_GUILDLEAVE_ACK(
		DWORD dwCharID,
		DWORD dwKey);
	void SendMW_GUILDDUTY_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		CString strTarget,
		BYTE bDuty);
	void SendMW_GUILDPEER_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		CString strTarget,
		BYTE bPeer);
	void SendMW_GUILDKICKOUT_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		CString strTarget);
	void SendMW_GUILDMEMBERLIST_ACK(
		DWORD dwCharID,
		DWORD dwKey);
	void SendMW_GUILDINFO_ACK(
		DWORD dwCharID,
		DWORD dwKEY);
	void SendMW_GUILDCABINETLIST_ACK(
		DWORD dwCharID,
		DWORD dwKEY);
	void SendMW_GUILDCABINETPUTIN_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwItemID,
		CTItem * pItem);
	void SendMW_GUILDCABINETTAKEOUT_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwItemID,
		BYTE bCount);
	void SendMW_GUILDCONTRIBUTION_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwExp,
		DWORD dwGold,
		DWORD dwSilver,
		DWORD dwCooper,
		DWORD dwPvPoint);
	void SendMW_GUILDARTICLELIST_ACK(
		DWORD dwCharID,
		DWORD dwKEY);
	void SendMW_GUILDARTICLEADD_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		CString strTitle,
		CString strArticle);
	void SendMW_GUILDARTICLEDEL_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwID);
	void SendMW_GUILDARTICLEUPDATE_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwID,
		CString strTitle,
		CString strArticle);
	void SendMW_GUILDFAME_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwFame,
		DWORD dwFameColor);
	void SendMW_GUILDWANTEDADD_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwID,
		CString strTitle,
		CString strText,
		BYTE bMinLevel,
		BYTE bMaxLevel);
	void SendMW_GUILDWANTEDDEL_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwID);
	void SendMW_GUILDWANTEDLIST_ACK(
		DWORD dwCharID,
		DWORD dwKEY);
	void SendMW_GUILDVOLUNTEERING_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwID);
	void SendMW_GUILDVOLUNTEERINGDEL_ACK(
		DWORD dwCharID,
		DWORD dwKey);
	void SendMW_GUILDVOLUNTEERLIST_ACK(
		DWORD dwCharID,
		DWORD dwKey);
	void SendMW_GUILDVOLUNTEERREPLY_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		DWORD dwTarget,
		BYTE bReply);
	void SendMW_GUILDTACTICSWANTEDADD_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwID,
		CString strTitle,
		CString strText,
		BYTE bDay,
		BYTE bMinLevel,
		BYTE bMaxLevel,
		DWORD dwPoint,
		DWORD dwGold,
		DWORD dwSilver,
		DWORD dwCooper);
	void SendMW_GUILDTACTICSWANTEDDEL_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwID);
	void SendMW_GUILDTACTICSWANTEDLIST_ACK(
		DWORD dwCharID,
		DWORD dwKEY);
	void SendMW_GUILDTACTICSVOLUNTEERING_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwGuildID,
		DWORD dwID);
	void SendMW_GUILDTACTICSVOLUNTEERINGDEL_ACK(
		DWORD dwCharID,
		DWORD dwKey);
	void SendMW_GUILDTACTICSVOLUNTEERLIST_ACK(
		DWORD dwCharID,
		DWORD dwKey);
	void SendMW_GUILDTACTICSREPLY_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		DWORD dwTargetID,
		BYTE bReply);
	void SendMW_GUILDTACTICSKICKOUT_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		DWORD dwTarget);
	void SendMW_GUILDTACTICSINVITE_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		CString strName,
		BYTE bDay,
		DWORD dwPoint,
		DWORD dwGold,
		DWORD dwSilver,
		DWORD dwCooper);
	void SendMW_GUILDTACTICSANSWER_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		BYTE bAnswer,
		CString strName,
		BYTE bDay,
		DWORD dwPoint,
		DWORD dwGold,
		DWORD dwSilver,
		DWORD dwCooper);
	void SendMW_GUILDTACTICSLIST_ACK(
		DWORD dwCharID,
		DWORD dwKey);

	//////////////////////////////////////////////////////////////////////////////////
	void SendMW_CHANGECHARBASE_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		BYTE bType,
		BYTE bValue,
		WORD wTitleID,
		CString strName = NAME_NULL);

	void SendMW_WARCOUNTRYBALANCE_ACK(
		DWORD dwCharID,
		DWORD dwKey);

	void SendMW_CHAT_ACK(
		BYTE bChannel,
		DWORD dwSender,
		DWORD dwSenderKEY,
		CString strSenderName,
		BYTE bType,
		BYTE bGroup,
		DWORD dwTarget,
		CString strName,
		CString strTalk);

	void SendMW_TAKEMONMONEY_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwMoney);

	void SendMW_MONSTERDIE_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwExp,
		DWORD dwMonID,
		FLOAT fPosX,
		FLOAT fPosY,
		FLOAT fPosZ,
		WORD wMonTermID,
		BYTE bTermType,
		BYTE bTriggerType,
		BYTE bCount);
	void SendMW_ADDITEM_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		BYTE bServerID,
		BYTE bChannel,
		WORD wMapID,
		DWORD dwMonID,
		BYTE bInven,
		BYTE bSlot,
		CTItem * pItem);
	void SendMW_PARTYORDERTAKEITEM_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		WORD wPartyID,
		BYTE bServerID,
		BYTE bChannel,
		WORD wMapID,
		DWORD dwMonID,
		WORD wTempMonID,
		VDWORD vMember,
		CTItem * pItem);
	void SendMW_PROTECTEDCHECK_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		BYTE bConnect,
		CString strProtected);
	void SendMW_FRIENDPROTECTEDASK_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		CString strInviter);
	void SendMW_FRIENDASK_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		CString strName);
	void SendMW_FRIENDREPLY_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		CString strInviter,
		BYTE bReply);
	void SendMW_FRIENDERASE_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		DWORD dwTarget);
	void SendMW_FRIENDGROUPMAKE_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		BYTE bGroup,
		CString strName);
	void SendMW_FRIENDGROUPDELETE_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		BYTE bGroup);
	void SendMW_FRIENDGROUPCHANGE_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		DWORD dwFriend,
		BYTE bGroup);
	void SendMW_FRIENDGROUPNAME_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		BYTE bGroup,
		CString strName);

	void SendMW_ENTERSOLOMAP_ACK(
		DWORD dwCharID,
		DWORD dwKEY);

	void SendMW_LEAVESOLOMAP_ACK(
		DWORD dwCharID,
		DWORD dwKEY);

	void SendMW_CHARSTATINFO_ACK(
		DWORD dwReqCharID,
		DWORD dwCharID);
	void SendMW_CHARSTATINFOANS_ACK(
		DWORD dwReqCharID,
		CTPlayer * pPlayer);
	void SendMW_LOCALENABLE_ACK(
		WORD wID,
		BYTE bStatus);
	void SendMW_LOCALOCCUPY_ACK(
		BYTE bType,
		WORD wLocalID,
		BYTE bCountry,
		DWORD dwGuildID,
		BYTE bCurCountry);
	void SendMW_CASTLEOCCUPY_ACK(
		BYTE bType,
		WORD wCastleID,
		DWORD dwGuildID,
		BYTE bCountry,
		DWORD dwLoseGuild);
#ifdef SKYGARDEN
	void SendMW_SKYGARDENOCCUPY_ACK(
		BYTE bType,
		WORD wID,
		BYTE bCountry);
#endif
	void SendMW_MISSIONOCCUPY_ACK(
		BYTE bType,
		WORD wLocalID,
		BYTE bCountry);
	void SendMW_CHGCORPSCOMMANDER_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		WORD wPartyID);
	void SendMW_CORPSLEAVE_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		WORD wSquadID);
	void SendMW_CORPSASK_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		CString strTargetName);
	void SendMW_CORPSREPLY_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		BYTE bReply,
		CString strReqName);
	void SendMW_CORPSCMD_ACK(
		DWORD dwGeneral,
		DWORD dwKey,
		WORD wMapID,
		WORD wSquadID,
		DWORD dwCharID,
		BYTE bCMD,
		DWORD dwTargetID,
		BYTE bTargetType,
		WORD wPosX,
		WORD wPosZ);

	void SendMW_MOVECORPSENEMY_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		DWORD dwReporterID,
		DWORD dwEnemyID,
		BYTE bEnemyType,
		FLOAT fSPEED,
		WORD wMapID,
		WORD wPosX,
		WORD wPosZ,
		WORD wDIR);
	void SendMW_MOVECORPSUNIT_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		WORD wSquadID,
		DWORD dwTargetID,
		FLOAT fSPEED,
		WORD wMapID,
		DWORD dwBSPID,
		WORD wPosX,
		WORD wPosZ,
		WORD wDIR);
	void SendMW_ADDCORPSENEMY_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		DWORD dwReporterID,
		DWORD dwEnemyID,
		BYTE bEnemyType,
		FLOAT fSPEED,
		WORD wMapID,
		WORD wPosX,
		WORD wPosZ,
		WORD wDIR);
	void SendMW_DELCORPSENEMY_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		DWORD dwReporterID,
		DWORD dwEnemyID,
		BYTE bEnemyType);

	void SendMW_CORPSHP_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		WORD wSquadID,
		DWORD dwTargetID,
		DWORD dwMaxHP,
		DWORD dwHP);

	void SendMW_PARTYMOVE_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		CString strTargetName,
		CString strDestName,
		WORD wParty);

	void SendMW_TMSSEND_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		DWORD dwTarget,
		CString strMessage);

	void SendMW_TMSINVITEASK_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwTargetID,
		DWORD dwTargetKEY,
		BYTE bResult,
		DWORD dwTMS,
		CString strMessage);

	void SendMW_TMSOUT_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		DWORD dwTMS);

	void SendMW_POSTRECV_ACK(
		DWORD dwPostID,
		CString strSender,
		CString strTarget,
		CString strTitle,
		BYTE bType);

	void SendMW_CASTLEENABLE_ACK(
		WORD wCastle,
		BYTE bStatus);

	void SendMW_CASTLEAPPLY_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		WORD wCastle,
		DWORD dwTarget,
		BYTE bCamp);

#ifdef SKYGARDEN
	void SendMW_SKYGARDENENABLE_ACK(
		BYTE bStatus);
#endif

	void SendMW_MONTEMPT_ACK(
		DWORD dwAttacker,
		WORD wMonID);

	void SendMW_MONTEMPTEVO_ACK(
		DWORD dwAttacker,
		DWORD dwHostID,
		BYTE bHostType);

	void SendMW_GETBLOOD_ACK(
		DWORD dwAtkID,
		BYTE bAtkType,
		DWORD dwHostID,
		BYTE bBloodType,
		DWORD dwBlood);

	void SendMW_REGION_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwRegion);

	void SendMW_BEGINTELEPORT_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		BYTE bSameChannel,
		BYTE bChannel,
		WORD wMapID,
		FLOAT fPosX,
		FLOAT fPosY,
		FLOAT fPosZ);

	void SendMW_HELMETHIDE_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		BYTE bHide);

	void SendMW_PARTYMEMBERRECALL_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		BYTE bInvenID,
		BYTE bItemID,
		CString strOrigin,
		CString strTarget);

	void SendMW_PARTYMEMBERRECALLANS_ACK(
		BYTE bResult,
		CString strUser,
		CString strTarget,
		BYTE bType,
		BYTE bInven,
		BYTE bItem,
		BYTE bChannel = 0,
		WORD wMapID = 0,
		FLOAT fPosX = 0,
		FLOAT fPosY = 0,
		FLOAT fPosZ = 0);

	void SendMW_SOULMATESEARCH_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		BYTE bMinLevel,
		BYTE bNpcInvenID,
		BYTE bNpcItemID);
	void SendMW_SOULMATEREG_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		CString strName,
		BYTE bReg,
		BYTE bNpcInvenID,
		BYTE bNpcItemID);
	void SendMW_SOULMATEEND_ACK(
		DWORD dwCharID,
		DWORD dwKEY);

	void SendCT_USERMOVE_ACK(
		CString strName,
		BYTE bChannel,
		WORD wMapID,
		FLOAT fPosX,
		FLOAT fPosY,
		FLOAT fPosZ,
		WORD wPartyID = 0
	);
	void SendCT_USERPOSITION_ACK(
		CString strGMName,
		CString strTargetName);

	void SendMW_CASTLEWARINFO_ACK(LPTLOCAL pCastle);
	void SendMW_ENDWAR_ACK(WORD wCastle);
	void SendMW_RECALLMONDATA_ACK(CTRecallMon * pRecall);
	void SendMW_HEROSELECT_ACK(
		WORD wBattleZoneID,
		CString strHeroName,
		__time64_t timeHero);
	void SendMW_GAINPVPPOINT_ACK(
		BYTE bOwnerType,
		DWORD dwOwnerID,
		DWORD dwPoint,
		BYTE bEvent,
		BYTE bType,
		BYTE bGain,
		CString strName = NAME_NULL,
		BYTE bClass = 0,
		BYTE bLevel = 0);
	void SendMW_LOCALRECORD_ACK(CPacket * pMsg);
	void SendMW_GUILDPOINTLOG_ACK(
		DWORD dwCharID,
		DWORD dwKey);
	void SendMW_GUILDPOINTREWARD_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		CString strTarget,
		DWORD dwPoint,
		CString strMessage);
	void SendMW_GUILDPVPRECORD_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		BYTE bType);
	void SendMW_MONSTERBUY_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		WORD wNpcID,
		WORD wID,
		DWORD dwPrice);
	void SendMW_GUILDMONEYRECOVER_ACK(
		DWORD dwGuildID,
		DWORD dwPrice);


	void SendMW_CASHITEMSALE_ACK(DWORD dwIndex, WORD wValue, BYTE bRet);

	void SendMW_MONTHRANKUPDATE_ACK(MONTHRANKER& stMonthRanker);
	void SendMW_FAMERANKUPDATE_ACK(BYTE bType, BYTE bMonth, BYTE bOrder, MONTHRANKER& stFameRanker);
	void SendMW_WARLORDSAY_ACK(BYTE bType, BYTE bRankMonth, DWORD dwCharID, CString strSay);
	void SendMW_TERMINATE_ACK(DWORD dwKey);
	void SendMW_TOURNAMENT_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		WORD wProtocol,
		DWORD dwValue = 0,
		WORD wValue = 0,
		BYTE bValue = 0,
		CString strValue = NAME_NULL);

	void SendMW_TOURNAMENTENTERGATE_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		DWORD dwMoney,
		BYTE bEnter);

	void SendMW_TOURNAMENTRESULT_ACK(
		BYTE bStep,
		BYTE bRet,
		DWORD dwWinner,
		DWORD dwLoser,
		DWORD dwBlueHideTick = 0,
		DWORD dwRedHideTick = 0);

	void SendMW_RPSGAME_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		BYTE bType,
		BYTE bWinCount,
		BYTE bPlayerRPS);
	void SendMW_MEETINGROOM_ACK(
		DWORD dwCharID,
		DWORD dwKey,
		BYTE bType,
		BYTE bValue,
		CString strName);
	void SendMW_CHATBAN_ACK(
		CString strTarget,
		WORD wMin,
		DWORD dwOperatorID,
		DWORD dwOperatorKey);

	void SendMW_CMGIFT_ACK(
		CString strTarget,
		WORD wGiftID,
		DWORD dwGMCharID);
	void SendMW_CMGIFTRESULT_ACK(
		BYTE bRet,
		BYTE bTool,
		DWORD dwGMID);

	//Apex
	void SendMW_APEXDATA_ACK(DWORD dwCharID, DWORD dwKey, char * BufRecv, int nLen);
	void SendMW_APEXSTART_ACK(DWORD dwCharID, DWORD dwKey, long nData);

	// DB request message sender (Call on BATCH thread)
	void SendDM_ACTEND_REQ(DWORD dwCharID);
	void SendDM_TELEPORT_REQ(
		DWORD dwCharID,
		DWORD dwKEY,
		BYTE bChannel,
		WORD wMapID,
		FLOAT fPosX,
		FLOAT fPosY,
		FLOAT fPosZ,
		BYTE bTutorialOut);

#ifdef	DEF_UDPLOG
	void SendDM_UDPLOG_REQ(_LOG_DATA_ pLogData);
#endif

	void SendDM_LOGSKILL_REQ(
		DWORD dwCharID,
		DWORD dwGold,
		DWORD dwSilver,
		DWORD dwCooper,
		WORD wSkill,
		BYTE bLevel);

	void SendDM_CREATERECALLMON_REQ(
		CTPlayer * pPlayer,
		WORD wMonID,
		DWORD dwATTR,
		WORD wPetID,
		CString strName,
		BYTE bLevel,
		BYTE bClass,
		BYTE bRace,
		BYTE bAction,
		BYTE bStatus,
		BYTE bMode,
		DWORD dwMaxHP,
		DWORD dwMaxMP,
		DWORD dwHP,
		DWORD dwMP,
		BYTE bHit,
		BYTE bSkillLevel,
		FLOAT fPosX,
		FLOAT fPosY,
		FLOAT fPosZ,
		WORD wDir,
		DWORD dwTime,
		VWORD vSkill);

	void SendDM_ENTERMAPSVR_REQ(
		BYTE bDBLoad,
		DWORD dwUserID,
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwIPAddr,
		WORD wPort,
		BYTE bChannel);

	void SendDM_LOADCHAR_REQ(
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwUserID);

	void SendDM_LOADPOSTMESSAGE_REQ(
		DWORD dwCharID,
		DWORD dwKEY);

	void SendDM_SAVECHAR_REQ(CTPlayer *pPlayer, WORD wACKMsg);

	void SendDM_SAVECHARPOSITION_REQ(
		CTPlayer *pPlayer,
		WORD wACKMsg);

	void SendDM_SAVEITEM_REQ(
		CTPlayer *pPlayer);

	void SendDM_LOGOUT_REQ(
		CTPlayer *pPlayer,
		WORD wACKMsg);

	void SendDM_CLEARTITLE_REQ(
		DWORD dwCharID);

	void SendDM_SAVETITLE_REQ(
		DWORD dwCharID,
		MAPTTITLE mapTITLE);

	void SendDM_CABINETITEM_REQ(
		DWORD dwCharID,
		DWORD dwKey);

	void SendDM_POSTLIST_REQ(
		DWORD dwCharID,
		DWORD dwKey,
		WORD wPage);

	void SendDM_POSTCANSEND_REQ(
		DWORD dwSendID,
		CString strSender,
		CString strTarget,
		CString strTitle,
		CString strMessage,
		BYTE bType,
		DWORD dwGold,
		DWORD dwSilver,
		DWORD dwCooper,
		BYTE bInven,
		BYTE bSlot);

	void SendDM_POSTRECV_REQ(
		DWORD dwSendID,
		DWORD dwRecvID,
		CString strSender,
		CString strTarget,
		CString strTitle,
		CString strMessage,
		BYTE bType,
		DWORD dwGold,
		DWORD dwSilver,
		DWORD dwCooper,
		CTItem * pItem);

	void SendDM_POSTRECVFROMSVR_REQ(
		DWORD dwRecvID,
		CString strTarget,
		CString strTitle,
		CString strMessage,
		BYTE bType,
		DWORD dwGold,
		DWORD dwSilver,
		DWORD dwCooper,
		LPVTITEM vpItem);

	void SendDM_POSTDEL_REQ(
		DWORD dwCharID,
		DWORD dwKey,
		DWORD dwPostID);

	void SendDM_POSTGETITEM_REQ(
		DWORD dwCharID,
		DWORD dwPostID);
	void SendDM_POSTVIEW_REQ(
		DWORD dwCharID,
		DWORD dwKey,
		DWORD dwPostID);

	void SendDM_CLEARCURRENTUSER_REQ(DWORD dwCharID);
	void SendDM_RECALLMONDEL_REQ(DWORD dwCharID, DWORD dwMonID);

	void SendDM_LOCALOCCUPY_REQ(
		WORD wLocalID,
		BYTE bType,
		DWORD dwOccupiedGuild,
		DWORD dwOccupiedChar);

	void SendDM_CASTLEOCCUPY_REQ(
		WORD wCastleID,
		BYTE bType,
		DWORD dwWinGuild,
		DWORD dwLoseGuild);

#ifdef SKYGARDEN
	void SendDM_SKYGARDENOCCUPY_REQ(
		WORD wID,
		BYTE bType,
		BYTE bCountry);
#endif

	void SendDM_MISSIONOCCUPY_REQ(
		WORD wLocalID,
		BYTE bType,
		BYTE bCountry,
		DWORD dwOccupiedChar);

	void SendDM_PETDEL_REQ(DWORD dwUserID, WORD wPetID);
	void SendDM_SMSSEND_REQ(
		DWORD dwCharID,
		DWORD dwKey,
		BYTE bInven,
		BYTE bItem,
		WORD wItemID,
		BYTE bType,
		DWORD dwGuildID,
		CString strTarget,
		CString strMsg);

	void SendDM_CASHITEMCABINET_REQ(
		DWORD dwCharID,
		DWORD dwKey,
		DWORD dwUserID);
	void SendDM_CASHITEMGET_REQ(
		DWORD dwCharID,
		DWORD dwKey,
		CString strName,
		DWORD dwUserID,
		DWORD dwID,
		BYTE bInven,
		BYTE bSlot);
	void SendDM_CASHSHOPITEMLIST_REQ(
		DWORD dwCharID,
		DWORD dwKey,
		DWORD dwUserID,
		WORD wItemID);
	void SendDM_CASHITEMBUY_REQ(
		DWORD dwCharID,
		DWORD dwKey,
		DWORD dwUserID,
		WORD wCashItemID,
		BYTE bBuyType,
		CString strTarget);
	void SendDM_CASHCABINETBUY_REQ(
		DWORD dwCharID,
		DWORD dwKey,
		WORD wShopItemID);
	void SendDM_CASHITEMPUTIN_REQ(
		DWORD dwCharID,
		DWORD dwKey,
		CString strName,
		BYTE bInvenID,
		BYTE bItemID,
		CTItem * pItem);
	void SendDM_GUILDCABINETPUTIN_REQ(
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwGuildID,
		CTItem * pItem,
		BYTE bCount);
	void SendDM_GUILDCABINETTAKEOUT_REQ(
		DWORD dwCharID,
		DWORD dwKEY,
		DWORD dwGuildID,
		DWORD dwItemID,
		BYTE bCount,
		BYTE bInvenID,
		BYTE bItemID);
	void SendDM_GUILDCABINETROLLBACK_REQ(
		DWORD dwGuildID,
		DWORD dwItemID,
		CTItem * pItem);

	void SendDM_EVENTQUARTER_REQ(
		CString strName,
		BYTE bDay,
		BYTE bHour,
		BYTE bMinute);
	void SendDM_SAVEEXP_REQ(
		DWORD dwCharID,
		DWORD dwEXP);
	void SendDM_SAVEMONEY_REQ(
		DWORD dwCharID,
		DWORD dwGold,
		DWORD dwSilver,
		DWORD dwCooper);
	void SendDM_DELETEDEALITEM_REQ(CTPlayer * pPlayer);
	void SendDM_POSTINVENITEM_REQ(
		DWORD dwID,
		DWORD dwKey,
		CString strName,
		CTInven * pInven);

	void SendDM_SAVECHARBASE_REQ(
		DWORD dwCharID,
		BYTE bType,
		BYTE bValue,
		WORD wTitleID,
		CString strName = NAME_NULL);

	void SendDM_CHECKCHANGENAME_REQ(
		DWORD dwCharID,
		DWORD dwKey,
		BYTE bInven,
		BYTE bItem,
		CString strName);

	void SendDM_STOPTHECLOCK_REQ(
		DWORD dwCharID,
		DWORD dwKey,
		BYTE bInven,
		BYTE bItem,
		WORD wShopItemID);

	void SendDM_HEROSELECT_REQ(
		DWORD dwCharID,
		DWORD dwKey,
		DWORD dwGuildID,
		WORD wBattleZoneID,
		CString strHeroName,
		__time64_t timeHero);

	void SendDM_POSTBILLUPDATE_REQ(
		DWORD dwCharID,
		CString strChar,
		DWORD dwPostID,
		BYTE bType,
		DWORD dwGold = 0,
		DWORD dwSilver = 0,
		DWORD dwCooper = 0);

	// DB acknowledge message sender (Call on DB thread)
	void SendDM_ENTERMAPSVR_ACK(
		DWORD dwCharID,
		DWORD dwKEY,
		BYTE bResult,
		BYTE bDBLoad);

	void SendDM_QUESTSENDPOST_REQ(
		DWORD dwQuestID,
		DWORD dwCharID,
		LPVTITEM pvItem);


	void SendDM_TAUCTIONCMD_ACK(
		WORD wNpcID,
		DWORD dwAuctionID,
		__time64_t dEndTime);

	void SendDM_AUCTIONEND_REQ(WORD wNpcID,
		DWORD dwAuctionID,
		__time64_t dEndTime);

	void SendDM_AUCTIONREG_REQ(
		DWORD dwSeller,
		DWORD dwKEY,
		CString strName,
		WORD wNpcID,
		WORD wHour,
		BYTE bInvenID,
		__int64 ldwDirectPrice,
		__int64 ldwStartPrice,
		CTItem* pTItem,
		DWORD dwCode);

	void SendDM_AUCTIONREGCANCEL_REQ(
		DWORD dwCharID,
		DWORD dwKEY,
		WORD wNpcID,
		DWORD dwAuctionID);

	void SendDM_AUCTIONBID_REQ(
		DWORD dwCharID,
		DWORD dwKEY,
		CString strName,
		DWORD dwUserID,
		WORD wNpcID,
		DWORD dwAuctionID,
		__int64 ldwBidPrice);

	void SendDM_AUCTIONBUYDIRECT_REQ(
		DWORD dwCharID,
		DWORD dwKEY,
		CString strName,
		WORD wNpcID,
		DWORD dwAuctionID,
		BYTE bCount,
		__int64 ldwBidPrice);

	void SendDM_GAINCASHBONUS_REQ(
		DWORD dwCharID,
		DWORD dwKEY,
		CString strName,
		BYTE bInven,
		BYTE bItem,
		WORD wItemID,
		DWORD dwBonus);

	void SendDM_WARLORDSAY_REQ(
		BYTE bType,
		BYTE bRankMonth,
		DWORD dwCharID,
		CString strSay);

	void SendDM_TOURNAMENTREWARD_REQ(
		BYTE bMonth,
		WORD wTournamentID,
		BYTE bEntryID,
		DWORD dwChiefID,
		DWORD dwWinner,
		BYTE bIsEquipShield);

	void SendDM_POSTBILL_REQ(
		DWORD dwCharID,
		DWORD dwKey);

	void SendDM_CMGIFTLOG_REQ(
		DWORD dwUserID,
		DWORD dwCharID,
		WORD wGiftID,
		DWORD dwGMID,
		WORD wErrID);

public:
	CTMapSvrModule();
	virtual ~CTMapSvrModule();

public:
	DECLARE_LIBID(LIBID_TMapSvrLib)
	DECLARE_REGISTRY_APPID_RESOURCEID(IDR_TMAPSVR, "{51AB7A30-995A-44AB-B869-7D79E92D466C}")
};

extern CTMapSvrModule _AtlModule;